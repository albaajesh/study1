<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.infotop.account.mapper.UserMapper">
  
  <select id="login" parameterType="map" resultType="User">
    SELECT
    	id,
    	login_name,
   		name,area,password,salt,
    	register_date,user_status,user_type
    FROM user
    WHERE name = #{name} AND password = #{password}
  </select>
  
  <select id="getPassword" parameterType="String"  resultType="String">
    SELECT
   		password 	
    FROM user
    WHERE name = #{name}
  </select>
  <insert id="saveUser" parameterType="User" keyProperty="id"
		useGeneratedKeys="true">
  	INSERT INTO user (login_name, name,area,password,salt,register_date,user_status,user_type)
    VALUES (#{loginName}, #{name}, #{area}, #{password}, #{salt}, NOW(), #{userStatus}, #{userType})
  </insert>
  
  

 
  
  <select id="getUserNameList" resultType="hashmap">
  	SELECT id,name FROM user
  </select>
  
  <select id="getUser" resultMap="userResult">
   SELECT
    	u.id as id ,
    	u.login_name,
    	u.name,u.area,
    	u.password,u.salt,
    	u.register_date,u.user_status,u.user_type,
    	r.id,
    	r.name,
	r.role_type,r.pid,
    	r.remark
    FROM user u
    LEFT JOIN user_role ur ON(u.id=ur.user_id)
    LEFT JOIN role r ON(r.id=ur.role_id) where u.login_name=#{username}
  </select>
  <select id="getUsernameById" resultType="String">
		select name as name  from user where id = #{id} 
 </select>
  <select id="getUserUpdateById" resultMap="userResult">
		select id,login_name,name from user where id = #{id} 
 </select>
 <update id="updateUser"  parameterType="User"> 
	UPDATE user SET
	name=#{name}
	WHERE id=#{id} 
  </update>
 	<select id="getDatagridTotal" parameterType="map" resultType="long">
		select count(1) from user 
		<if test="login_name!=null and login_name!='' or name!=null and name!=''">
		where
		</if>
		<if test="login_name!=null and login_name!=''">
		 login_name like #{login_name}
		</if>
		 <if test="login_name!=null and login_name!='' and name!=null and name!=''">
		 and
		 </if>
		<if test="name!=null and name!=''">
		name like #{name}
		</if>
		 
	</select>
	<select id="getUserById" resultMap="userResult">
		 SELECT
    	u.id as id ,
    	u.login_name,
    	u.name,u.area,
    	u.password,u.salt,
    	u.register_date,u.user_status,u.user_type,
    	r.id,
    	r.name,
	r.role_type,r.pid,
    	r.remark
    FROM user u
    LEFT JOIN user_role ur ON(u.id=ur.user_id)
    LEFT JOIN role r ON(r.id=ur.role_id) where u.id=#{id} 
 </select>
	<select id="datagridUser" parameterType="map" resultMap="userResult">
		select id,login_name,name,register_date from user 
		<if test="login_name!=null and login_name!='' or name!=null and name!=''">
		where
		</if>
		<if test="login_name!=null and login_name!=''">
		 login_name like #{login_name}
		</if>
		 <if test="login_name!=null and login_name!='' and name!=null and name!=''">
		 and
		 </if>
		<if test="name!=null and name!=''">
		name like #{name}
		</if>
		<if test="sort != null and sort != ''">
            order by #{sort} #{order}
        </if>
        
            limit #{start},#{end}
     
	</select>
  <resultMap id="userResult"  type="User"> 
 		<id property="id"  column="id" />
		<result property="loginName" column="login_name"/>
		<result property="name" column="name"/>
		<result property="area" column="area"/>
		<result property="password" column="password"/>
		<result property="salt" column="salt"/>
		<result property="registerDate" column="register_date"/>
		<result property="userStatus" column="user_status"/>
		<result property="userType" column="user_type"/>
		<collection property="roleList"  ofType="Role"> 
			<id property="id"  column="id"/> 
			<result property="name"  column="name"/>
			<result property="roleType"  column="role_type"/>
			<result property="pid"  column="pid"/>
			<result property="remark" column="remark"/>
		</collection> 
  </resultMap>
  <delete id="deleteUserRoleByUserId"  parameterType="long">
  	DELETE FROM user_role WHERE user_id=#{id}
  </delete>
  
  <insert id="insertUser" parameterType="User" keyProperty="id"
		useGeneratedKeys="true">
  	INSERT INTO user (name, password, create_date)
    VALUES (#{name}, #{password}, #{createDate,jdbcType=TIMESTAMP})
  </insert>
  
  <insert id="insertUserRole">
  	INSERT INTO user_role (user_id,role_id)
    VALUES (#{userId}, #{roleId})
  </insert>
  
  <!-- <update id="updateUser"  parameterType="User"> 
	UPDATE user
	<set> 
		<if test="name != null">name=#{name},</if> 
		<if test="password != null">password=#{password}</if>
	</set>
	WHERE id=#{id} 
  </update> -->
  
  <update id="updateUserRole"  parameterType="map"> 
	UPDATE user_role SET
	role_id=#{role_id}
	WHERE user_id=#{user_id}
  </update>
  
  <delete id="deleteUser"  parameterType="long">
  	DELETE user,user_role FROM user,user_role where user.id=#{id} and user_role.user_id=#{id}
  </delete>
  
  <delete id="deleteUserRole"  parameterType="map">
  	DELETE FROM user_role WHERE user_id=#{user_id}
  </delete>
  
  <update id="changeUserPassword"  parameterType="map"> 
	UPDATE user SET password=#{newPassword} WHERE id=#{id}
  </update>
  
</mapper>